apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: airflow
  namespace: dev
spec:
  interval: 30s
  releaseName: airflow-dev
  chart:
    spec:
      chart: airflow
      version: "1.10.0"
      sourceRef:
        kind: HelmRepository
        name: apache-airflow
        namespace: flux-system
  values:
    defaultAirflowTag: "2.7.0"
    airflowVersion: "2.7.0"
    fernetKey: "zTxhk7FuGqQVPZVoukLn5bGWOrgHzhQnBnaqAItcZGI="
    env:
      - name: "AIRFLOW__CORE__LOAD_EXAMPLES"
        value: "False"
      - name: "AIRFLOW__KUBERNETES_EXECUTOR__NAMESPACE"
        value: "dev"
      - name: "AIRFLOW__KUBERNETES_EXECUTOR__WORKER_CONTAINER_REPOSITORY"
        value: "apache/airflow"
      - name: "AIRFLOW__KUBERNETES_EXECUTOR__WORKER_CONTAINER_TAG"
        value: "slim-2.7.0-python3.8"
      - name: "AIRFLOW__KUBERNETES__RUN_AS_USER"
        value: "50000"
      - name: "AIRFLOW__KUBERNETES__GIT_SYNC_RUN_AS_USER"
        value: "65533"
      - name: "AIRFLOW__KUBERNETES__LOGS_VOLUME_CLAIM"
        value: "airflow-dev-logs"  
    executor: "KubernetesExecutor"
    webserver:
    livenessProbe:
      scheme: "HTTPS"
    readnessProbe:
      scheme: "HTTPS"
      extraVolumes:
        - name: "logs"
          persistentVolumeClaim:
            claimName: "airflow-dev-logs"
      extraVolumeMounts:
        - name: "logs"
          mountPath: "/opt/airflow/logs"
    createUserJob:
      useHelmHooks: false
    migrateDatabaseJob:
      useHelmHooks: false
    dags:
      persistence:
        enabled: false
      gitSync:
        enabled: true
        repo: git@github.com:raghvendra-udchalo/airflow-dags.git
        branch: master
        maxFailures: 0
        subPath: ""
        wait: 60
        sshKeySecret: airflow-ssh-secret
    extraSecrets:
      airflow-ssh-secret:
        data: |
          gitSshKey: 'LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBb1RlSmh4a0lKelQ1dnRhNzBtZ3RqK1BaaW9qa1N2VjFyNXJIbVJWbjM4TTJtMlA1CjZXaG9GZjhjb2VtQnJxWnJON2RKSFRmMGp0U3lteXU3Vmw5N2JVek5mUHpvYUNtUGFHQlpLTmEzMUFTcmd0aFUKenAxelJHTFZlUk5pQ1JEWXh0MjBVNVNrUTZpQjZCMkZDb2w0d3B0MTBFa3ErdnppT2Z5MGo5alZKV1l6OVhoTQppUzJxcmMvaGZGZFpyVGx6VmVwYTVVaVQvajhpcS85b2xFbjB1STVFQlRiU281MDdLY09RY1c1aXorY2NYeDg1CmphclIrazR3WFhaUVU5dUg3dW9zOEl6YWxoZmM3UHJYQjd1UzVQdzN6OWNUeDVkQjhySzJjVlVSdTU0VHoxWXkKam5UcEw0YWtJUkFSWENicG91SjNYOEYydzBNL0tJd2ZEb3c1SDVhT256Z1Z1RERidDUrcXAyYmJCQlZGcGRPVApNWVh4UlIvQkJxS05uMFM2SlhGSjJ6VDZ4elN0T3ZaWFA5VGdkYnFkZXJ2YWt3MklDL3dqSmNsUG55V3Q1djFQCjhRMlROUW4xTFNkZUxqVUwxb1hDRnJCVm9aVnQxTlBSTHdiRnA0UWNUV01CaG45b2R1US9tZjhMeE9oOXIvWmUKTzJiSzU3WEdkL0NQUy9zeVdRWWhiMlNaRkZsYkp0U3VoeTVUdzNqQUxIMGlidzlwQ3dQRDd3OXk3MWphajBxegpxcUVzczFUd3lXZml3VHgyZXVyUWZHZnlsN0gyZDJ3WVNGWmNxRU1UN1lrWVRDaTM5RjJBNU1ScWtFdndlR3IyCnZaTzRyVnNTY3lKeGx2S05KUVcwT1lhT09vR3pvMDNIOXlRSnhLQ09aMW9mTzd3Z2pFQXU1K2V3UHBVQ0F3RUEKQVFLQ0FnQVFOK2NVK1RheHd3bVE0a2RZM25RZThwd1M3THlTc2VqWjlxYzN4a2lCNFVDZ0YwbXY2bm4ySklqNwozT0xYOEJQL01lZ2dFVjMvOUhQWFdtbnBRWWZJTWg3R0FTZGNPem9iRlA1RE5uNmR6SzU0Wmt6NTBDc2xhUS95CnN6bDhrZjVNMjBibDFhRkUwVEhvYVBmV1hJZ1NnOU14VmZzRjd1VFBVcFhUbHN1eWpIcVRxanVBM1dBN1JodDQKQjgyVXVKL2F0ODNYSFJzT1M4bXdKZXllWm1aQkhzYkhBNEhqUmRFSzNZcXRicDV3TGQ3VHp1OWFTaUgvblZnTwpQdlhMeWR6OTh2NzhZQjhwVkZNOFgrdTc4bW5Qc1hQbjY4b29uUlhjVlpBM0RJalJLQkQwSGNiT1FBS3BibEVhCnBtUW9zaDEwN25WMTQ1K1AremJpWEY1UGQxblRvODlsRzRzbTcyTzVPK1Y5UEFud3NiaDJVcDZVdjRwb1RjcnQKMUlaVks3aU5qL0RtNXBwYlhVakVyRlR4MVdPNDhya1hjLzk3VFpWYlgyeURJU0t3VC83MWJ1aFd3bHp1V3dGagprOStmaGdoVloyYVVZZDN1L0o4QXRoOGdzMWk5K0N2Sm16VjNLbXAxdVpFcFN2NWpmUEdNQ1FwU0VRNzVub0ZOCjBQSFdXeG5YUVAreGZLLzZLTE9BVnJPcklhaEp2d0g3dElFbVE2cVNxSEM3aVRFNVJRTWV1L2d1UEV5YkloWWwKTFNELzJIblZrQ0FpbHcycnpwZzhpVzl3WG1wRVNLZXhzUlpEYmt6U0hJRlBJQ1R5SHVtWkkxNlJ4dnZXTGYregpDQnN1bE5sdlhqcmRPdW1JallEYm52UHB0ME5aMnducTlhbjkxWUx2NXJSWFM2aFRZUUtDQVFFQXpudWl4TVBICjBYL0JTL0xFVWlnL2RNbTV5aHM4Z2JmbmN6R0s4NDJnK3FId3JZVUhGRUZ4SmNzSlVpcWswVGp2elJ4dXIrUjIKRWJWRUdlS0VEMzlFL21FNU9lNmtnY21BRHNpc3VxVmE3ZkU2Z09ubFdWQ0FtVWNXaU5iUVNwVm5DR3F3cVNwMApZUnc3RHpIMG5hMC9aM25zaGNtOWN2V2RJVXZjNGw3MFhnOFpOVjhQK0hHeWVtVGI2R2dlQXhjUjRHSkN2eE4xCnJHd2F4VVBrcTNLMi9tempaVEd2T3JBaHJEL2tPejZCbEtTa3hEN1pGWEJJTTdkc2RFbkJHNGgzNmQ5QmVtSmEKYVlDSmZ1TnBaaXhESmJncCsrQmkwZDJ3UkRkaUZGWGZjMGE5VHpuZURhV1FIRTVGcTFOZ1BiOW1nVEdkN3hGNAo4L28vbVlSeXYvd2dpUUtDQVFFQXgrRHdUS0xoQTVTZzRRY3J2NVFHbkZMQzgrSWo2dExtN1ZGODNxTU1ZZDVnCjd0bmhUMkx4V1hnVFk3dWJSZW44UXUwdDNRVURDeGlzd0RRdldWNmF2UTE4dWkrNkxBd25oNE1SWFFiNUNIQjcKZlpDUHdUNThMRUxOeCtXNFM1c1k0WU5XTEhYeDJ5TlhYR3B6OGVkQ1BUZkJvWDJvQjBqdjBWMnFZaHlrN01TNQp2clN2b09lTnBNOHd0SmdKTmFweXBFeEJ5YXlOTFY4VjhsZFpRVi9xYy9aNTRaYmROaWFMdXVRWnZRQlFONVBKClFzOHhiZW1HQ2FRU0tnTi9xZTdXV0lIM29KZmUycWlxZFgwUzhHNllMQ3YwN3lncjNuekljWWE2alMvL2FFbWUKbDEzcXBNdDhwMjJocTZNZW1hMmNNZTU1TnF6Yzd0NytST0tHM0hleXJRS0NBUUVBanM4RitZN3JFYU9KZmt6TwpxWC82dTN5VnlnbmlaRmxjYzlpTklQd1FuYWdKUFFubnBvUElqUG9MWFUvdkpHRjd3V0hyMEMxejE3V0YvMTBpCk4xR3YxenhKQng5ZG1nSlNWbWRHeCtSN3Fsd1FPWDhMeUNVY2ZHYWxXRWt5VUpOYWFvRFg1SGhmZTVhNTVqMkgKME5JMUt3MHhvQ3F5bytMcUpWQkIyak1RVWttaEJyL1QzT0pPTGNhNkxkaHRBWGdnUGcvWDJDM09VazJHaW03MQpwZnEyUSt2dHJseVp0RDZEVzQzby9XeXkxS3EyNXFBTkpuMjlBai9YZStwUzdBY0w0SzR2ckVTQUFiNEwycjNRCmRRRWlBK0dHOEJUMlkrNHU3azlidjNMUkUvcVdEa2lZb3RtaWZXRkpZRUJQTFFYSEVJM1BqTHlKNmp4blpuY3IKb2tyditRS0NBUUF4ajJyRjlkVUpTRDhqek4xaUlWZ0tSdE1rR2J5Q0swMHJKdnRwVU5CdksrNnBDc2s5SC9GcwpGOFBuQk11WmFFMHVZeFR1S3FINGpHTzVQTGRJMTVaU3JoZHhLd2hraDViOW1OZ2pVdWxJMkdzbVZVUHZ6SWlKCmlQN3hROXFRbEtKMHVGWVRyQ01PRFJOS1RQTDIxanFzWnpqUnpCQnZ6ZnY0MDlxOWZSQy96SCtwODY5Z25FbVkKeGU3enVJY0FFWVZmaTdEOFNwYXUyMWJid2lEVmZ1enBXQUljbDRXK09ZeUlDS3NCSENUSHd4TXlSNkdmK1RsTgpCcXVpVXovQ2FRQW83Z0R5aHZXeERnVkdJSDhqc3FoMHUybCtLMTNGU3ZlQWZzR2U1SG5WNS9zMDJRcW5WZlZRCnBuUmgxSTV2MklaVU15ZEhFVkd1d1FnWEdId01Dbm41QW9JQkFRQ2lOOUd6U0tiTEhNaXgyQU5yeGNHSXJRa0cKRmhKZzRVRzBPaHhYVk1kaEtlK2E0eU4xUTJwVC9sY3pmN2xteWd0aWVWa2g2KzFsby9kVzBHeGxkQkY0WVdpawpaWWNiMzErSFhRZVFyVkNoQzlKRVBjVjdPZkI4WEVNRWdGL2U3cG9VR3RNdXBGbXNlcHZKeGdYdTlnNXFrNDIyClJLT3BVelVkZjc2cHJEN3hUZTFsRVFlc2pGZXlhcmc2S0tqWWRlSitaVlNUYjRGaU4xNzNRanpKd2lxc2tDK1EKTE9mSlVEL0h6VWlQUFUzOXM0eGdJVU02M05QSGxmWkNFWGh0R1RQcTFGY0dHc3J0aUxjWnVqWDlBYnRKUGpKRQoyNTNOanhUakxJVWFERFl1bHpFTFNSQkhjM0tzeDJFbTZLQnZOcmRrSWZUazZZR01US0pxQXUrbTZFZFkKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K'
          